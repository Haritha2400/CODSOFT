class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]  # 3x3 board as a list
        self.current_winner = None  # Tracks the winner (if any)

    def print_board(self):
        """Prints the board."""
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]:
            print('| ' + ' | '.join(row) + ' |')
        print()

    def available_moves(self):
        """Returns a list of available moves (indices)."""
        return [i for i, spot in enumerate(self.board) if spot == ' ']

    def empty_squares(self):
        """Returns True if there are empty squares on the board."""
        return ' ' in self.board

    def num_empty_squares(self):
        """Returns the count of empty squares."""
        return self.board.count(' ')

    def make_move(self, square, letter):
        """
        Makes a move on the board.
        :param square: Position (0-8)
        :param letter: 'X' or 'O'
        """
        if self.board[square] == ' ':
            self.board[square] = letter
            if self.check_winner(square, letter):
                self.current_winner = letter
            return True
        return False

    def check_winner(self, square, letter):
        """
        Checks if a player has won.
        :param square: Last move made.
        :param letter: Player's letter ('X' or 'O').
        """
        row_ind = square // 3
        row = self.board[row_ind*3:(row_ind+1)*3]
        if all([s == letter for s in row]):
            return True

        col_ind = square % 3
        column = [self.board[col_ind+i*3] for i in range(3)]
        if all([s == letter for s in column]):
            return True

        if square % 2 == 0:
            diagonal1 = [self.board[i] for i in [0, 4, 8]]
            if all([s == letter for s in diagonal1]):
                return True
            diagonal2 = [self.board[i] for i in [2, 4, 6]]
            if all([s == letter for s in diagonal2]):
                return True

        return False


def minimax(state, depth, alpha, beta, maximizing_player):
    """
    Implements the Minimax algorithm with Alpha-Beta Pruning.
    :param state: Current board state.
    :param depth: Depth of the recursion.
    :param alpha: Best value for the maximizer.
    :param beta: Best value for the minimizer.
    :param maximizing_player: True if it's AI's turn; False otherwise.
    """
    if state.current_winner == 'O':
        return 1
    elif state.current_winner == 'X':
        return -1
    elif not state.empty_squares():
        return 0

    if maximizing_player:
        max_eval = -float('inf')
        for move in state.available_moves():
            state.make_move(move, 'O')
            eval = minimax(state, depth + 1, alpha, beta, False)
            state.board[move] = ' '
            state.current_winner = None
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float('inf')
        for move in state.available_moves():
            state.make_move(move, 'X')
            eval = minimax(state, depth + 1, alpha, beta, True)
            state.board[move] = ' '
            state.current_winner = None
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval


def best_move(game):
    """
    Determines the best move for the AI.
    :param game: Current game instance.
    """
    best_score = -float('inf')
    move = None
    for possible_move in game.available_moves():
        game.make_move(possible_move, 'O')
        score = minimax(game, 0, -float('inf'), float('inf'), False)
        game.board[possible_move] = ' '
        game.current_winner = None
        if score > best_score:
            best_score = score
            move = possible_move
    return move


def play():
    game = TicTacToe()
    print("Welcome to Tic-Tac-Toe!")
    game.print_board()

    while game.empty_squares():
        # Human's turn
        move = None
        while move not in game.available_moves():
            try:
                move = int(input("Enter your move (0-8): "))
            except ValueError:
                print("Invalid input. Please enter a number between 0 and 8.")

        game.make_move(move, 'X')
        game.print_board()

        if game.current_winner:
            print("Congratulations, you win!")
            return

        # AI's turn
        print("AI is making its move...")
        ai_move = best_move(game)
        game.make_move(ai_move, 'O')
        game.print_board()

        if game.current_winner:
            print("AI wins! Better luck next time.")
            return

    print("It's a tie!")


if __name__ == '__main__':
    play()
